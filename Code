import os
import shutil
import numpy as np
import cv2
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
import tkinter as tk
from tkinter import messagebox, filedialog
import matplotlib.pyplot as plt
from PIL import Image, ImageFilter
import joblib
# Define input_folder globally
input_folder = r'C:\Feature Extraction1'
def split_data(input_folder, test_size=0.2, random_state=42):
image_files = [f for f in os.listdir(input_folder) if f.lower().endswith(('.png', '.
jpg', '.jpeg', '.gif', '.bmp'))]
image_paths = [os.path.join(input_folder, f) for f in image_files]
labels = [f.split('_')[0] for f in image_files]
X_train, X_test, y_train, y_test = train_test_split(image_paths, labels, test_size=t
est_size, random_state=random_state)
return X_train, X_test, y_train, y_test
def extract_features(image_paths):
features = []
for img_path in image_paths:
img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (128, 128)) # Resize image if necessary
features.append(img.flatten())
return np.array(features)
def kmeans_clustering(input_folder, output_folder, num_clusters=5):
X_train, _, _, _ = split_data(input_folder)
features = extract_features(X_train)
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
kmeans.fit(features)
for cluster_id in range(num_clusters):
cluster_folder = os.path.join(output_folder, f'Cluster_{cluster_id}')
os.makedirs(cluster_folder, exist_ok=True)
for img_path, label in zip(X_train, kmeans.labels_):
img_name = os.path.basename(img_path)
output_cluster_folder = os.path.join(output_folder, f'Cluster_{label}')
shutil.copy(img_path, os.path.join(output_cluster_folder, img_name))
def preprocess_image(img_path, output_folder, target_size=(224, 224)):
img = Image.open(img_path)
width_ratio = target_size[0] / img.size[0]
height_ratio = target_size[1] / img.size[1]
aspect_ratio = min(width_ratio, height_ratio)
new_width = int(img.size[0] * aspect_ratio)
new_height = int(img.size[1] * aspect_ratio)
img = img.convert('L')
img = img.filter(ImageFilter.GaussianBlur(radius=2))
os.makedirs(output_folder, exist_ok=True)
output_path = os.path.join(output_folder, os.path.basename(img_path))
img.save(output_path)
return output_path
def extract_shape_features(img):
edges = cv2.Canny(img, 50, 150)
return edges
def display_and_save_images(input_folder, output_folder):
if not os.path.exists(output_folder):
os.makedirs(output_folder)
for img_path in input_folder:
img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (128, 128))
shape_features = extract_shape_features(img)
plt.figure(figsize=(15, 5))
plt.subplot(1, 3, 1)
original_img = cv2.imread(img_path)
plt.imshow(cv2.cvtColor(original_img, cv2.COLOR_BGR2RGB))
plt.title('Original')
plt.axis('off')
plt.subplot(1, 3, 2)
preprocessed_img = Image.open(img_path).convert('L').filter(ImageFilter.Gaussian
Blur(radius=2))
plt.imshow(preprocessed_img, cmap='gray')
plt.title('Preprocessed')
plt.axis('off')
plt.subplot(1, 3, 3)
plt.imshow(shape_features, cmap='gray')
plt.title('Feature Extraction')
plt.axis('off')
plt.savefig(os.path.join(output_folder, f"{os.path.basename(img_path)}_processed
.png"))
plt.show()
def data_preprocessing_clicked():
file_path = filedialog.askopenfilename()
if file_path:
try:
output_folder = r'C:\Front End Data Preprocessing'
preprocessed_path = preprocess_image(file_path, output_folder)
original_img = Image.open(file_path)
display_preprocessed_image(original_img, preprocessed_path)
except Exception as e:
messagebox.showerror("Error", f"An error occurred while preprocessing image:
{str(e)}")
def feature_extraction_clicked():
file_path = filedialog.askopenfilename()
if file_path:
input_images = [file_path]
output_folder = r'C:\Front End Feature Extraction'
display_and_save_images(input_images, output_folder)
def data_splitting_clicked():
input_folder = r'C:\Feature Extraction1'
X_train, X_test, y_train, y_test = split_data(input_folder)
print("Training samples:", len(X_train))
print("Testing samples:", len(X_test))
def train_model():
messagebox.showinfo("Training", "Model training will start...")
clustering_output_folder = r'C:\Front End Clustering'
num_clusters = 2
kmeans_clustering(input_folder, clustering_output_folder, num_clusters)
messagebox.showinfo("Training", "Model training completed. Check the output folder fo
r clustered images.")
def testing_model():
messagebox.showinfo("Testing", "Testing will start...")
input_folder = r'C:\TestImages' # Folder containing new test images
output_folder = r'C:\Testing' # Output folder from previous clustering
model_path = os.path.join(output_folder, 'kmeans_model.pkl') # Path to the trained K
Means model
num_clusters = 2 # Number of clusters used during training
# Load the trained KMeans model
kmeans_model = joblib.load(model_path)
# Perform testing on new images
perform_testing(input_folder, kmeans_model, output_folder)
messagebox.showinfo("Testing", "Testing completed. Check the output folder for predic
ted clusters.")
def perform_testing(input_folder, kmeans_model, output_folder):
# Get paths of new image files
new_image_files = [f for f in os.listdir(input_folder) if f.lower().endswith(('.png'
, '.jpg', '.jpeg', '.gif', '.bmp'))]
new_image_paths = [os.path.join(input_folder, f) for f in new_image_files]
# Predict clusters for new images
new_features = extract_features(new_image_paths)
predicted_labels = kmeans_model.predict(new_features)
# Display new images and their predicted clusters
for img_path, label in zip(new_image_paths, predicted_labels):
img_name = os.path.basename(img_path)
output_cluster_folder = os.path.join(output_folder, f'Predicted_Cluster_{label}'
)
os.makedirs(output_cluster_folder, exist_ok=True) # Create the directory if it
doesn't exist
shutil.copy(img_path, os.path.join(output_cluster_folder, img_name))
# Display the image
img = cv2.imread(img_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Convert BGR to RGB
plt.imshow(img)
plt.title(f'Predicted Cluster: {label}')
plt.axis('off')
plt.show()
def display_preprocessed_image(original_img, preprocessed_img_path):
try:
preprocessed_img = Image.open(preprocessed_img_path)
fig, axes = plt.subplots(1, 2, figsize=(10, 5))
axes[0].imshow(original_img)
axes[0].set_title('Original Image')
axes[0].axis('off')
axes[1].imshow(preprocessed_img, cmap='gray')
axes[1].set_title('Preprocessed Image')
axes[1].axis('off')
plt.show()
except Exception as e:
messagebox.showerror("Error", f"An error occurred while displaying images: {str(
e)}")
def open_file_manager():
file_path = filedialog.askopenfilename()
if file_path:
messagebox.showinfo("Selected File", f"You selected: {file_path}")
window = tk.Tk()
window.title("Project")
window.configure(bg="ivory")
heading_label = tk.Label(window, text="Dr. T. Thimmaiah Institute of Technology", font=("
Times roman", 48, "bold"), bg="ivory")
heading_label.grid(row=0, column=0, columnspan=5, padx=20, pady=10)
subheading_label1 = tk.Label(window, text="Project on: An Automated Blood Cancer Detectio
n System to Detect Leukemia Using Improved Machine Learning Techniques", font=("Times new
roman", 16,"bold"), bg="ivory")
subheading_label1.grid(row=2, column=0, columnspan=5, padx=20, pady=10)
subheading_label2 = tk.Label(window, text="Department of Computer Science", font=("Times
new roman", 30,"bold"), bg="ivory")
subheading_label2.grid(row=1, column=0, columnspan=5, padx=20, pady=10)
preprocessing_button = tk.Button(window, text="Data Preprocessing", command=data_preproc
essing_clicked, bg="lightgreen", width=15, height=5, font=("Times New Roman", 15, "bold"
))
preprocessing_button.grid(row=3, column=0, padx=(10, 5), pady=10, sticky="ew")
arrow_label1 = tk.Label(window, text="➡", font=("Arial", 100), bg="ivory")
arrow_label1.grid(row=3, column=1, padx=5, pady=10)
extraction_button = tk.Button(window, text="Feature Extraction", command=feature_extract
ion_clicked, bg="lightgreen", width=15, height=5, font=("Times New Roman", 15, "bold"))
extraction_button.grid(row=3, column=2, padx=5, pady=15, sticky="ew")
arrow_label2 = tk.Label(window, text="➡", font=("Arial", 100), bg="ivory")
arrow_label2.grid(row=3, column=3, padx=5, pady=10)
data_splitting_button = tk.Button(window, text="Data Splitting", command=data_splitting_
clicked, bg="lightgreen", width=15, height=5, font=("Times New Roman", 15, "bold"))
data_splitting_button.grid(row=3, column=4, padx=(5, 10), pady=10, sticky="ew")
arrow_label3 = tk.Label(window, text="➡", font=("Arial", 100), bg="ivory")
arrow_label3.grid(row=3, column=5, padx=5, pady=10)
training_button = tk.Button(window, text="Training", command=train_model, bg="lightgreen
", width=15, height=5, font=("Times New Roman", 15, "bold"))
training_button.grid(row=4, column=0, padx=(10, 5), pady=20, sticky="ew")
arrow_label4 = tk.Label(window, text="➡", font=("Arial", 100), bg="ivory")
arrow_label4.grid(row=4, column=1, padx=5, pady=20)
testing_button = tk.Button(window, text="Classification", command=testing_model, bg="lig
htgreen", width=15, height=5, font=("Times New Roman", 15, "bold"))
testing_button.grid(row=4, column=2, padx=5, pady=20, sticky="ew")
window.update_idletasks()
width = window.winfo_width()
height = window.winfo_height()
x_offset = (window.winfo_screenwidth() - width) // 2
y_offset = (window.winfo_screenheight() - height) // 2
window.geometry(f"+{x_offset}+{y_offset}")
window.mainloop()
